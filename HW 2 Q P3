.data
result: .word 0
n: .word 0
.text
li $v0, 5

syscall

sw $v0, n
li $v0, 0
lw $t0, n

# Function to calculate Myfun(N)
Myfun:
    # Function prologue
    # Save the return address on the stack
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    # Base case: if N <= 0, return 0
    li $t1, 0           # Load 0 into $t1
    
 beq $t0, $zero, base_case # Branch to base_case if N <= 0

    # Recursive case: N > 0
    addi $t0, $t0, -1    # Decrement N by 1
    move $a0, $t0        # Pass N-1 as the argument
    jal Myfun            # Recursive call
 # Calculate Myfun(N-1) + N and store the result in $v0
    lw $t2, 0($v0)       # Load the result of Myfun(N-1) from $v0
    addi $t7, $t0, 1
    add $v0, $t2, $t7    # Calculate Myfun(N-1) + N
	#sw $v0, result
	
    # Function epilogue/
    # Restore the return address from the stack and return
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

    # Base case: return 0
base_case:
    li $v0, 0
    
    # Function epilogue for the base case
    # Restore the return address from the stack and return
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra
    
 output:  
    lw $v0, result
    move $a0, $v0
    li $v0, 1
    syscall
    
    li $v0, 10
    syscall
    
